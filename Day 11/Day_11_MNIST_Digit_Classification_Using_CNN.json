{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "higher-found",
   "metadata": {},
   "source": [
    "# #Day 11 Action item"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "welcome-penguin",
   "metadata": {},
   "source": [
    "Importing Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "prime-compound",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "import os\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.datasets import mnist\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from keras.models import Sequential\n",
    "from sklearn.model_selection import KFold\n",
    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D,BatchNormalization\n",
    "from keras.optimizers import RMSprop,Adam,SGD\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "palestinian-engine",
   "metadata": {},
   "source": [
    "Reading samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "advisory-watson",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data shape, data=(60000, 28, 28),labels=(60000,)\n",
      "Test data shape, data=(10000, 28, 28),labels=(10000,)\n"
     ]
    }
   ],
   "source": [
    "(x_train,y_train),(x_test,y_test) = mnist.load_data()\n",
    "print('Train data shape, data={},labels={}'.format(x_train.shape,y_train.shape))\n",
    "print('Test data shape, data={},labels={}'.format(x_test.shape,y_test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "considerable-masters",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f, axarr = plt.subplots(2,2)\n",
    "axarr[0,0].imshow(x_train[0])\n",
    "axarr[0,1].imshow(x_train[1])\n",
    "axarr[1,0].imshow(x_train[2])\n",
    "axarr[1,1].imshow(x_train[3])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "passing-fairy",
   "metadata": {},
   "source": [
    "Reshaping Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "internal-chocolate",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = x_train.reshape((x_train.shape[0],28,28,1))\n",
    "x_test = x_test.reshape((x_test.shape[0],28,28,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "editorial-chinese",
   "metadata": {},
   "source": [
    "One-hot encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "devoted-basic",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train =to_categorical(y_train)\n",
    "y_test =to_categorical(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "solar-japan",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 10)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "related-excerpt",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 10)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "extensive-possibility",
   "metadata": {},
   "source": [
    "Normalizing and changing pixel range "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "generous-founder",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train= x_train.astype('float32')\n",
    "x_test = x_test.astype('float32')\n",
    "x_train =x_train/255.0\n",
    "x_test = x_test/255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "neural-girlfriend",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cleared-scope",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.min()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "timely-reform",
   "metadata": {},
   "source": [
    "Building Simple model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "broke-center",
   "metadata": {},
   "outputs": [],
   "source": [
    "model1 = Sequential()\n",
    "model1.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))\n",
    "model1.add(MaxPool2D((2, 2)))\n",
    "model1.add(Flatten())\n",
    "model1.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))\n",
    "model1.add(Dense(10, activation='softmax'))\n",
    "# compile model\n",
    "opt = SGD(lr=0.01, momentum=0.9)\n",
    "model1.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "possible-reputation",
   "metadata": {},
   "source": [
    "train the model and evaluate the scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fitted-angel",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "469/469 [==============================] - 11s 23ms/step - loss: 0.2770 - accuracy: 0.9161 - val_loss: 0.1341 - val_accuracy: 0.9586\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 0.1160 - accuracy: 0.9656 - val_loss: 0.0830 - val_accuracy: 0.9752\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 0.0788 - accuracy: 0.9767 - val_loss: 0.0674 - val_accuracy: 0.9784\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 15s 31ms/step - loss: 0.0590 - accuracy: 0.9827 - val_loss: 0.0574 - val_accuracy: 0.9820\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 14s 29ms/step - loss: 0.0469 - accuracy: 0.9865 - val_loss: 0.0539 - val_accuracy: 0.9819\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 13s 29ms/step - loss: 0.0391 - accuracy: 0.9887 - val_loss: 0.0501 - val_accuracy: 0.9833\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0329 - accuracy: 0.9907 - val_loss: 0.0494 - val_accuracy: 0.9843\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0286 - accuracy: 0.9922 - val_loss: 0.0437 - val_accuracy: 0.9851\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0238 - accuracy: 0.9933 - val_loss: 0.0437 - val_accuracy: 0.9851\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0209 - accuracy: 0.9942 - val_loss: 0.0444 - val_accuracy: 0.9854\n",
      "313/313 [==============================] - 1s 3ms/step - loss: 0.0444 - accuracy: 0.9854\n",
      "> 98.540\n",
      "Epoch 1/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0177 - accuracy: 0.9958 - val_loss: 0.0395 - val_accuracy: 0.9870\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 13s 29ms/step - loss: 0.0155 - accuracy: 0.9964 - val_loss: 0.0413 - val_accuracy: 0.9865\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0133 - accuracy: 0.9969 - val_loss: 0.0431 - val_accuracy: 0.9859\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 14s 29ms/step - loss: 0.0118 - accuracy: 0.9975 - val_loss: 0.0414 - val_accuracy: 0.9871\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0105 - accuracy: 0.9979 - val_loss: 0.0396 - val_accuracy: 0.9865\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 13s 29ms/step - loss: 0.0088 - accuracy: 0.9984 - val_loss: 0.0419 - val_accuracy: 0.9861\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 13s 27ms/step - loss: 0.0078 - accuracy: 0.9988 - val_loss: 0.0424 - val_accuracy: 0.9863\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0069 - accuracy: 0.9989 - val_loss: 0.0417 - val_accuracy: 0.9865\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0058 - accuracy: 0.9993 - val_loss: 0.0439 - val_accuracy: 0.9850\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0052 - accuracy: 0.9993 - val_loss: 0.0436 - val_accuracy: 0.9857\n",
      "313/313 [==============================] - 1s 4ms/step - loss: 0.0436 - accuracy: 0.9857\n",
      "> 98.570\n",
      "Epoch 1/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0049 - accuracy: 0.9994 - val_loss: 0.0430 - val_accuracy: 0.9855\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 14s 29ms/step - loss: 0.0042 - accuracy: 0.9995 - val_loss: 0.0421 - val_accuracy: 0.9865\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 14s 31ms/step - loss: 0.0036 - accuracy: 0.9997 - val_loss: 0.0416 - val_accuracy: 0.9871\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 14s 31ms/step - loss: 0.0030 - accuracy: 0.9998 - val_loss: 0.0416 - val_accuracy: 0.9865\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 13s 27ms/step - loss: 0.0029 - accuracy: 0.9998 - val_loss: 0.0414 - val_accuracy: 0.9866\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 0.0027 - accuracy: 0.9998 - val_loss: 0.0435 - val_accuracy: 0.9858\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 12s 27ms/step - loss: 0.0024 - accuracy: 0.9999 - val_loss: 0.0441 - val_accuracy: 0.9861\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 0.0021 - accuracy: 0.9999 - val_loss: 0.0421 - val_accuracy: 0.9862\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 0.0019 - accuracy: 0.9999 - val_loss: 0.0424 - val_accuracy: 0.9867\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 0.0017 - accuracy: 0.9999 - val_loss: 0.0428 - val_accuracy: 0.9867\n",
      "313/313 [==============================] - 1s 3ms/step - loss: 0.0428 - accuracy: 0.9867\n",
      "> 98.670\n",
      "Epoch 1/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 0.0016 - accuracy: 1.0000 - val_loss: 0.0429 - val_accuracy: 0.9865\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 14s 29ms/step - loss: 0.0015 - accuracy: 1.0000 - val_loss: 0.0436 - val_accuracy: 0.9863\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0014 - accuracy: 1.0000 - val_loss: 0.0434 - val_accuracy: 0.9869\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0013 - accuracy: 1.0000 - val_loss: 0.0435 - val_accuracy: 0.9862\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 13s 29ms/step - loss: 0.0012 - accuracy: 1.0000 - val_loss: 0.0438 - val_accuracy: 0.9866\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0011 - accuracy: 1.0000 - val_loss: 0.0450 - val_accuracy: 0.9865\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0011 - accuracy: 1.0000 - val_loss: 0.0447 - val_accuracy: 0.9862\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 0.0010 - accuracy: 1.0000 - val_loss: 0.0444 - val_accuracy: 0.9863\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 15s 31ms/step - loss: 9.5253e-04 - accuracy: 1.0000 - val_loss: 0.0456 - val_accuracy: 0.9864\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 15s 33ms/step - loss: 9.1623e-04 - accuracy: 1.0000 - val_loss: 0.0446 - val_accuracy: 0.9861\n",
      "313/313 [==============================] - 1s 4ms/step - loss: 0.0446 - accuracy: 0.9861\n",
      "> 98.610\n",
      "Epoch 1/10\n",
      "469/469 [==============================] - 14s 30ms/step - loss: 8.9183e-04 - accuracy: 1.0000 - val_loss: 0.0456 - val_accuracy: 0.9862\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 15s 33ms/step - loss: 8.5232e-04 - accuracy: 1.0000 - val_loss: 0.0456 - val_accuracy: 0.9859\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 14s 31ms/step - loss: 8.0203e-04 - accuracy: 1.0000 - val_loss: 0.0454 - val_accuracy: 0.9862\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 15s 31ms/step - loss: 7.6481e-04 - accuracy: 1.0000 - val_loss: 0.0453 - val_accuracy: 0.9862\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 13s 28ms/step - loss: 7.3370e-04 - accuracy: 1.0000 - val_loss: 0.0457 - val_accuracy: 0.9863\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 7.1037e-04 - accuracy: 1.0000 - val_loss: 0.0464 - val_accuracy: 0.9863\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 6.8173e-04 - accuracy: 1.0000 - val_loss: 0.0457 - val_accuracy: 0.9861\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 13s 27ms/step - loss: 6.5559e-04 - accuracy: 1.0000 - val_loss: 0.0461 - val_accuracy: 0.9867\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 13s 27ms/step - loss: 6.3683e-04 - accuracy: 1.0000 - val_loss: 0.0467 - val_accuracy: 0.9861\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 12s 26ms/step - loss: 6.0811e-04 - accuracy: 1.0000 - val_loss: 0.0469 - val_accuracy: 0.9864\n",
      "313/313 [==============================] - 1s 3ms/step - loss: 0.0469 - accuracy: 0.9864\n",
      "> 98.640\n"
     ]
    }
   ],
   "source": [
    "scores, histories = [], []\n",
    "# prepare cross validation\n",
    "kfold = KFold(5, shuffle=True, random_state=1)\n",
    "# enumerate splits\n",
    "for train_ix, test_ix in kfold.split(x_train):\n",
    "    # define model\n",
    "    # fit model\n",
    "    history = model1.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_test, y_test), verbose=1)\n",
    "    # evaluate model\n",
    "    _, acc = model1.evaluate(x_test, y_test, verbose=1)\n",
    "    print('> %.3f' % (acc * 100.0))\n",
    "    # stores scores\n",
    "    scores.append(acc)\n",
    "    histories.append(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "genuine-radiation",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: mean=98.606 std=0.047, n=5\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy: mean=%.3f std=%.3f, n=%d' % (np.mean(scores)*100, np.std(scores)*100, len(scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aerial-garage",
   "metadata": {},
   "source": [
    "Using Batch Normalization model 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "average-bryan",
   "metadata": {},
   "outputs": [],
   "source": [
    "def define_model_batchnorm():\n",
    "    model = Sequential()\n",
    "    model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(MaxPool2D((2, 2)))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Dense(10, activation='softmax'))\n",
    "    # compile model\n",
    "    opt = SGD(lr=0.01, momentum=0.9)\n",
    "    model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ceramic-prevention",
   "metadata": {},
   "outputs": [],
   "source": [
    "model2 =define_model_batchnorm()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "overall-medicare",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "469/469 [==============================] - 30s 64ms/step - loss: 0.1464 - accuracy: 0.9577 - val_loss: 0.1109 - val_accuracy: 0.9735\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 31s 66ms/step - loss: 0.0486 - accuracy: 0.9866 - val_loss: 0.0478 - val_accuracy: 0.9852\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 32s 69ms/step - loss: 0.0294 - accuracy: 0.9925 - val_loss: 0.0469 - val_accuracy: 0.9855\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 32s 68ms/step - loss: 0.0184 - accuracy: 0.9960 - val_loss: 0.0454 - val_accuracy: 0.9858\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 30s 63ms/step - loss: 0.0123 - accuracy: 0.9980 - val_loss: 0.0408 - val_accuracy: 0.9873\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 37s 78ms/step - loss: 0.0081 - accuracy: 0.9991 - val_loss: 0.0412 - val_accuracy: 0.9880\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 35s 75ms/step - loss: 0.0058 - accuracy: 0.9996 - val_loss: 0.0394 - val_accuracy: 0.9879\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 0.0042 - accuracy: 0.9998 - val_loss: 0.0398 - val_accuracy: 0.9877\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 40s 84ms/step - loss: 0.0031 - accuracy: 0.9999 - val_loss: 0.0398 - val_accuracy: 0.9881\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 35s 75ms/step - loss: 0.0027 - accuracy: 0.9999 - val_loss: 0.0396 - val_accuracy: 0.9874\n",
      "313/313 [==============================] - 1s 4ms/step - loss: 0.0396 - accuracy: 0.9874: 0s - loss: 0\n",
      "> 98.740\n",
      "Epoch 1/10\n",
      "469/469 [==============================] - 40s 84ms/step - loss: 0.0023 - accuracy: 1.0000 - val_loss: 0.0397 - val_accuracy: 0.9888\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 35s 74ms/step - loss: 0.0019 - accuracy: 0.9999 - val_loss: 0.0408 - val_accuracy: 0.9881\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 38s 80ms/step - loss: 0.0017 - accuracy: 1.0000 - val_loss: 0.0409 - val_accuracy: 0.9876\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 37s 79ms/step - loss: 0.0014 - accuracy: 1.0000 - val_loss: 0.0406 - val_accuracy: 0.9887\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 0.0013 - accuracy: 1.0000 - val_loss: 0.0407 - val_accuracy: 0.9887\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 32s 69ms/step - loss: 0.0012 - accuracy: 1.0000 - val_loss: 0.0415 - val_accuracy: 0.9885\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 31s 67ms/step - loss: 0.0011 - accuracy: 1.0000 - val_loss: 0.0420 - val_accuracy: 0.9886\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 32s 68ms/step - loss: 9.5537e-04 - accuracy: 1.0000 - val_loss: 0.0417 - val_accuracy: 0.9890\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 33s 70ms/step - loss: 9.5308e-04 - accuracy: 1.0000 - val_loss: 0.0412 - val_accuracy: 0.9889\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 32s 68ms/step - loss: 8.5086e-04 - accuracy: 1.0000 - val_loss: 0.0411 - val_accuracy: 0.9884\n",
      "313/313 [==============================] - 1s 4ms/step - loss: 0.0411 - accuracy: 0.9884\n",
      "> 98.840\n",
      "Epoch 1/10\n",
      "469/469 [==============================] - 32s 69ms/step - loss: 7.5086e-04 - accuracy: 1.0000 - val_loss: 0.0417 - val_accuracy: 0.9891\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 31s 67ms/step - loss: 6.8226e-04 - accuracy: 1.0000 - val_loss: 0.0421 - val_accuracy: 0.9887\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 32s 68ms/step - loss: 6.8399e-04 - accuracy: 1.0000 - val_loss: 0.0427 - val_accuracy: 0.9886\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 32s 68ms/step - loss: 6.0549e-04 - accuracy: 1.0000 - val_loss: 0.0425 - val_accuracy: 0.9893\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 32s 68ms/step - loss: 6.0162e-04 - accuracy: 1.0000 - val_loss: 0.0421 - val_accuracy: 0.9888\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 32s 68ms/step - loss: 5.7470e-04 - accuracy: 1.0000 - val_loss: 0.0425 - val_accuracy: 0.9892\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 5.4842e-04 - accuracy: 1.0000 - val_loss: 0.0423 - val_accuracy: 0.9891\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 4.9928e-04 - accuracy: 1.0000 - val_loss: 0.0424 - val_accuracy: 0.9892\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 4.7944e-04 - accuracy: 1.0000 - val_loss: 0.0425 - val_accuracy: 0.9889\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 36s 76ms/step - loss: 4.5153e-04 - accuracy: 1.0000 - val_loss: 0.0428 - val_accuracy: 0.9894\n",
      "313/313 [==============================] - 1s 4ms/step - loss: 0.0428 - accuracy: 0.9894\n",
      "> 98.940\n",
      "Epoch 1/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 4.3970e-04 - accuracy: 1.0000 - val_loss: 0.0430 - val_accuracy: 0.9888\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 4.3023e-04 - accuracy: 1.0000 - val_loss: 0.0435 - val_accuracy: 0.9893\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 36s 76ms/step - loss: 4.0690e-04 - accuracy: 1.0000 - val_loss: 0.0431 - val_accuracy: 0.9892\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 3.8587e-04 - accuracy: 1.0000 - val_loss: 0.0431 - val_accuracy: 0.9890\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 35s 76ms/step - loss: 3.6374e-04 - accuracy: 1.0000 - val_loss: 0.0432 - val_accuracy: 0.9890\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 34s 72ms/step - loss: 3.5361e-04 - accuracy: 1.0000 - val_loss: 0.0433 - val_accuracy: 0.9890\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 33s 71ms/step - loss: 3.4123e-04 - accuracy: 1.0000 - val_loss: 0.0436 - val_accuracy: 0.9890\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 33s 70ms/step - loss: 3.4263e-04 - accuracy: 1.0000 - val_loss: 0.0438 - val_accuracy: 0.9892\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 33s 70ms/step - loss: 3.2245e-04 - accuracy: 1.0000 - val_loss: 0.0439 - val_accuracy: 0.9888\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 33s 70ms/step - loss: 3.1722e-04 - accuracy: 1.0000 - val_loss: 0.0441 - val_accuracy: 0.9891\n",
      "313/313 [==============================] - 1s 4ms/step - loss: 0.0441 - accuracy: 0.9891\n",
      "> 98.910\n",
      "Epoch 1/10\n",
      "469/469 [==============================] - 36s 77ms/step - loss: 3.0729e-04 - accuracy: 1.0000 - val_loss: 0.0439 - val_accuracy: 0.9891\n",
      "Epoch 2/10\n",
      "469/469 [==============================] - 34s 73ms/step - loss: 3.0535e-04 - accuracy: 1.0000 - val_loss: 0.0439 - val_accuracy: 0.9893\n",
      "Epoch 3/10\n",
      "469/469 [==============================] - 33s 71ms/step - loss: 2.8247e-04 - accuracy: 1.0000 - val_loss: 0.0442 - val_accuracy: 0.9893\n",
      "Epoch 4/10\n",
      "469/469 [==============================] - 34s 72ms/step - loss: 2.8285e-04 - accuracy: 1.0000 - val_loss: 0.0443 - val_accuracy: 0.9891\n",
      "Epoch 5/10\n",
      "469/469 [==============================] - 34s 73ms/step - loss: 2.7514e-04 - accuracy: 1.0000 - val_loss: 0.0444 - val_accuracy: 0.9892\n",
      "Epoch 6/10\n",
      "469/469 [==============================] - 33s 71ms/step - loss: 2.6322e-04 - accuracy: 1.0000 - val_loss: 0.0449 - val_accuracy: 0.9890\n",
      "Epoch 7/10\n",
      "469/469 [==============================] - 33s 71ms/step - loss: 2.5289e-04 - accuracy: 1.0000 - val_loss: 0.0449 - val_accuracy: 0.9889\n",
      "Epoch 8/10\n",
      "469/469 [==============================] - 33s 70ms/step - loss: 2.5288e-04 - accuracy: 1.0000 - val_loss: 0.0450 - val_accuracy: 0.9889\n",
      "Epoch 9/10\n",
      "469/469 [==============================] - 417s 888ms/step - loss: 2.4183e-04 - accuracy: 1.0000 - val_loss: 0.0450 - val_accuracy: 0.9892\n",
      "Epoch 10/10\n",
      "469/469 [==============================] - 37s 78ms/step - loss: 2.4345e-04 - accuracy: 1.0000 - val_loss: 0.0451 - val_accuracy: 0.9892\n",
      "313/313 [==============================] - 1s 3ms/step - loss: 0.0451 - accuracy: 0.9892\n",
      "> 98.920\n"
     ]
    }
   ],
   "source": [
    "scores2, histories2 = [], []\n",
    "# prepare cross validation\n",
    "kfold = KFold(5, shuffle=True, random_state=1)\n",
    "# enumerate splits\n",
    "for train_ix, test_ix in kfold.split(x_train):\n",
    "    # define model\n",
    "    # fit model\n",
    "    history = model2.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_test, y_test), verbose=1)\n",
    "    # evaluate model\n",
    "    _, acc = model2.evaluate(x_test, y_test, verbose=1)\n",
    "    print('> %.3f' % (acc * 100.0))\n",
    "    # stores scores\n",
    "    scores2.append(acc)\n",
    "    histories2.append(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "dress-treaty",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: mean=98.870 std=0.073, n=5\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy: mean=%.3f std=%.3f, n=%d' % (np.mean(scores2)*100, np.std(scores2)*100, len(scores2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "approximate-tanzania",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
